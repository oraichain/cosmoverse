{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Step by step how to play with cosmwasm simulation tools"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### add cw-simulate module"
            ],
            "outputs": []
        },
        {
            "language": "shellscript",
            "source": [
                "yarn add @oraichain/cw-simulate -D"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Features\n\n- configure multiple host chain environments with chain-specific settings / state (cosmos hub, terra, oraichain ...)\n- multiple simultaneous contract instances can exist per chain (complex module requires many smart contracts)\n- chain modules can be simulated through custom user code (bank, wasm, ibc modules ...)\n- extensible for further instrumentation via custom middlewares (extended logic such as IBC hooks)\n- load fork state from running blockhain (for integration test with mainnet)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Import cw-simulate module and create new instance"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\nimport { SimulateCosmWasmClient } from \"@oraichain/cw-simulate\";\nconst senderAddress = \"orai14vcw5qk0tdvknpa38wz46js5g7vrvut8lk0lk6\";\nconst client = new SimulateCosmWasmClient({\n  chainId: \"Oraichain\",\n  bech32Prefix: \"orai\",\n  metering: true\n});\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Setup account balance then transfer"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { coins } from \"@cosmjs/stargate\";\nclient.app.bank.setBalance(senderAddress, coins('10000000', 'orai'));\n\nawait client.getBalance(senderAddress, 'orai')"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  amount: \u001b[32m'10000000'\u001b[39m,",
                                "  denom: \u001b[32m'orai'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Deploy contract on SimulateCosmwasmClient"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { Cw20BaseClient } from \"@oraichain/common-contracts-sdk\";\nimport * as commonArtifacts from \"@oraichain/common-contracts-build\";\nimport fs from \"fs\";\n\nconst { codeId } = await client.upload(senderAddress, fs.readFileSync(commonArtifacts.getContractDir(\"cw20-base\")), \"auto\");\nconst { contractAddress } = await client.instantiate(senderAddress, codeId, {\n    decimals: 6,\n    symbol: \"CVT\",\n    name: \"cosmoverse token\",\n    mint: { minter: senderAddress },\n    initial_balances: [{ address: senderAddress, amount: \"1000000000\" }] \n});\nconst cw20Contract = new Cw20BaseClient(client, senderAddress, contractAddress);\n\nawait cw20Contract.tokenInfo()\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  name: \u001b[32m'cosmoverse token'\u001b[39m,",
                                "  symbol: \u001b[32m'CVT'\u001b[39m,",
                                "  decimals: \u001b[33m6\u001b[39m,",
                                "  total_supply: \u001b[32m'1000000000'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Console.log in smart contract\n\n1. run `code ../cw-plus/contracts/cw20-base` to add log function\n1. run `cwtools build ../cw-plus/contracts/cw20-base -d -w -o node_modules/@oraichain/common-contracts-build/data/` to override wasm contract file\n1. re-run notebook above to see the log\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Execute contract with gas metering"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { Cw20BaseClient } from \"@oraichain/common-contracts-sdk\";\nconst cw20Contract = new Cw20BaseClient(client, senderAddress, contractAddress);\nconst { gasUsed } = await cw20Contract.transfer({amount: '1000000', recipient: 'orai1ur2vsjrjarygawpdwtqteaazfchvw4fg6uql76'});\nconsole.log(`Transfer token required gas: ${gasUsed}`);\n\nawait cw20Contract.balance({address:'orai1ur2vsjrjarygawpdwtqteaazfchvw4fg6uql76'})\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Transfer token required gas: 56478",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  balance: \u001b[32m'1000000'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Setup IBC channels"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { CWSimulateApp } from \"@oraichain/cw-simulate\";\n\nconst cosmosChain = new CWSimulateApp({\n    chainId: \"cosmoshub-4\",\n    bech32Prefix: \"cosmos\"\n});\n\n// relay message between Cosmos Hub and Oraichain\ncosmosChain.ibc.relay(\"channel-0\", \"transfer\", \"channel-0\", \"transfer\", client.app);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Send Orai token from Oraichain to Cosmos Hub"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// mint ibc/orai on cosmos hub and burn orai on oraichain\nawait client.app.ibc.sendTransfer({\n    channelId: \"channel-0\",\n    receiver: \"cosmos1ur2vsjrjarygawpdwtqteaazfchvw4fgf0kulf\",\n    token: { amount: \"1000000\", denom: \"orai\" },\n    sender: senderAddress\n});\n\ncosmosChain.bank.getBalance(\"cosmos1ur2vsjrjarygawpdwtqteaazfchvw4fgf0kulf\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    denom: \u001b[32m'ibc/56c280c7163a5e37ea987d3fa195ea719b7b7c7d319615afaa17cba5a347cec4'\u001b[39m,",
                                "    amount: \u001b[32m'1000000'\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Send back IBC Orai from Cosmos Hub to Oraichain"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// mint orai on oraichain and burn ibc/orai on cosmos hub\nawait cosmosChain.ibc.sendTransfer({\n    channelId: \"channel-0\",\n    receiver: senderAddress,\n    token: { amount: \"1000000\", denom: \"ibc/56c280c7163a5e37ea987d3fa195ea719b7b7c7d319615afaa17cba5a347cec4\" },\n    sender: \"cosmos1ur2vsjrjarygawpdwtqteaazfchvw4fgf0kulf\"\n});\n\ncosmosChain.bank.getBalance(\"cosmos1ur2vsjrjarygawpdwtqteaazfchvw4fgf0kulf\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Load smart contract with state from running blockchain"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { DownloadState } from \"@oraichain/cw-simulate\";\nimport { Cw20BaseClient} from \"@oraichain/common-contracts-sdk\";\nimport path from \"path\";\n\nconst downloadState = new DownloadState('https://lcd.orai.io', path.join(__dirname, \"src/data\"));\nawait downloadState.loadState(client, senderAddress, \"orai1nd4r053e3kgedgld2ymen8l9yrw8xpjyaal7j5\", \"kwt token\");\nconst kwtContract = new Cw20BaseClient(client, senderAddress, \"orai1nd4r053e3kgedgld2ymen8l9yrw8xpjyaal7j5\");\n\nawait kwtContract.allAccounts({limit:5})"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  accounts: [",
                                "    \u001b[32m'orai1q9l6nvn5g3gnllft3shwepz6wln3zww8axlx9d'\u001b[39m,",
                                "    \u001b[32m'orai1qxts5avx4cr55fm6mfz4xdtrq446wqxpn3fy08'\u001b[39m,",
                                "    \u001b[32m'orai1qfuc8va6y79qt8yckzyxvc5d7j8lxdnj40ha9k'\u001b[39m,",
                                "    \u001b[32m'orai1q2adfmdxejrzepk6srnxjg6gnj45s660p0ljqn'\u001b[39m,",
                                "    \u001b[32m'orai1qt3s05k29d3qla398dg90x8226asejfewknj2g'\u001b[39m",
                                "  ]",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Setup port module using smart contract"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import * as commonArtifacts from \"@oraichain/common-contracts-build\";\nimport { CwIcs20LatestClient } from \"@oraichain/common-contracts-sdk\";\nimport fs from 'fs';\n\n// deploy ics20 contract \nconst { codeId } = await client.upload(\n    senderAddress,\n    fs.readFileSync(commonArtifacts.getContractDir(\"cw-ics20-latest\")),\n    \"auto\"\n);\n\nconst { contractAddress } = await client.instantiate(senderAddress, codeId, {\n    allowlist: [],\n    default_timeout: 3600,\n    gov_contract: senderAddress,\n    swap_router_contract: \"placeholder\"\n});\n\n\nconst ics20Contract = new CwIcs20LatestClient(client, senderAddress, contractAddress);\n\nawait ics20Contract.config()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  default_timeout: \u001b[33m3600\u001b[39m,",
                                "  default_gas_limit: \u001b[1mnull\u001b[22m,",
                                "  fee_denom: \u001b[32m'orai'\u001b[39m,",
                                "  swap_router_contract: \u001b[32m'placeholder'\u001b[39m,",
                                "  gov_contract: \u001b[32m'orai14vcw5qk0tdvknpa38wz46js5g7vrvut8lk0lk6'\u001b[39m,",
                                "  token_fee_receiver: \u001b[32m'orai14vcw5qk0tdvknpa38wz46js5g7vrvut8lk0lk6'\u001b[39m,",
                                "  relayer_fee_receiver: \u001b[32m'orai14vcw5qk0tdvknpa38wz46js5g7vrvut8lk0lk6'\u001b[39m,",
                                "  token_fees: [],",
                                "  relayer_fees: []",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Setup IBC channel between Cosmos Hub transfer port module and Oraichain CosmWasm port module"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const oraiPort = \"wasm.\" + ics20Contract.contractAddress;\nconst channel = \"channel-2\"\nconst packetData = {\n    src: {\n      port_id: \"transfer\",\n      channel_id: channel\n    },\n    dest: {\n      port_id: oraiPort,\n      channel_id: channel\n    },\n    sequence: 27,\n    timeout: {\n      block: {\n        revision: 1,\n        height: 12345678\n      }\n    }\n};\n\n// init ibc channel between two chains\nclient.app.ibc.relay(channel, oraiPort, channel, \"transfer\", cosmosChain);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Send Open and Connect packets"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { IbcOrder } from \"@oraichain/cw-simulate\";\n\nawait cosmosChain.ibc.sendChannelOpen({\n    open_init: {\n        channel: {\n            counterparty_endpoint: {\n                port_id: oraiPort,\n                channel_id: channel\n            },\n            endpoint: {\n                port_id: \"transfer\",\n                channel_id: channel\n            },\n            order: IbcOrder.Unordered,\n            version: \"ics20-1\",\n            connection_id: \"connection-0\"\n        }\n    }\n});\n\nawait cosmosChain.ibc.sendChannelConnect({\n    open_ack: {\n        channel: {\n            counterparty_endpoint: {\n                port_id: oraiPort,\n                channel_id: channel\n            },\n            endpoint: {\n                port_id: \"transfer\",\n                channel_id: channel\n            },\n            order: IbcOrder.Unordered,\n            version: \"ics20-1\",\n            connection_id: \"connection-0\"\n        },\n        counterparty_version: \"ics20-1\"\n    }\n});\n\n// handle IBC message timeout\ncosmosChain.ibc.addMiddleWare((msg, app) => {\n    const data = msg.data.packet;\n    if (Number(data.timeout.timestamp) < cosmosChain.time) {\n        throw new GenericError(\"timeout at \" + data.timeout.timestamp);\n    }\n});"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Prepare for interaction"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { coins } from \"@cosmjs/stargate\"\n\nconst airiIbcDenom = \"tron-testnet0x7e2A35C746F2f7C240B664F1Da4DD100141AE71F\";\n\nawait ics20Contract.updateMappingPair({\n   localAssetInfo: {\n     token: {\n       contract_addr: cw20Contract.contractAddress\n     }\n   },\n   localAssetInfoDecimals: 6,\n   denom: airiIbcDenom,\n   remoteDecimals: 6,\n   localChannelId: channel\n});\n\n// topup\nclient.app.bank.setBalance(ics20Contract.contractAddress, coins(\"10000000000000\", \"orai\"));\n\nawait client.getBalance(ics20Contract.contractAddress, 'orai')"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  amount: \u001b[32m'10000000000000'\u001b[39m,",
                                "  denom: \u001b[32m'orai'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Send IBC token between Cosmos Hub and Oraichain"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\nimport bech32 from \"bech32\";\nimport { toBinary } from \"@cosmjs/cosmwasm-stargate\";\n\nconst cosmosSenderAddress = bech32.encode(\"cosmos\", bech32.decode(senderAddress).words);\n\n// now send ibc package\nconst icsPackage = {\n    amount: \"100000000\",\n    denom: airiIbcDenom,\n    receiver: senderAddress,\n    sender: cosmosSenderAddress,\n    memo: \"\"\n};\n\n// transfer from cosmos to oraichain, should pass\nawait cosmosChain.ibc.sendPacketReceive({\n    packet: {\n      data: toBinary(icsPackage),\n      ...packetData\n    },\n    relayer: cosmosSenderAddress\n});\n\nconst transferBackMsg = {\n    local_channel_id: channel,\n    remote_address: cosmosSenderAddress,\n    remote_denom: airiIbcDenom\n};\n\ncw20Contract.sender = senderAddress;\n\nawait cw20Contract.send({\n    amount: \"100000000\",\n    contract: ics20Contract.contractAddress,\n    msg: toBinary(transferBackMsg)\n});\nconst ibcBalance = await cw20Contract.balance({ address: ics20Contract.contractAddress });\n\n// should return initialBalance: 100000000\nibcBalance.balance"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'100000000'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}