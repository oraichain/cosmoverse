{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Step by step how to play with cosmwasm simulation tools"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### add cw-simulate module"
            ],
            "outputs": []
        },
        {
            "language": "shellscript",
            "source": [
                "yarn add @oraichain/cw-simulate -D"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Import cw-simulate module and create new instance"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "\nimport { SimulateCosmWasmClient } from \"@oraichain/cw-simulate\";\nconst senderAddress = \"orai14vcw5qk0tdvknpa38wz46js5g7vrvut8lk0lk6\";\nconst client = new SimulateCosmWasmClient({\n  chainId: \"Oraichain\",\n  bech32Prefix: \"orai\",\n  metering: true\n});\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Setup account balance then transfer"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { coins } from \"@cosmjs/stargate\";\nclient.app.bank.setBalance(senderAddress, coins('10000000', 'orai'));\n\nawait client.getBalance(senderAddress, 'orai')"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  amount: \u001b[32m'10000000'\u001b[39m,",
                                "  denom: \u001b[32m'orai'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Deploy contract on SimulateCosmwasmClient"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { Cw20BaseClient } from \"@oraichain/common-contracts-sdk\";\nimport * as commonArtifacts from \"@oraichain/common-contracts-build\";\nimport fs from \"fs\";\n\nconst { codeId } = await client.upload(senderAddress, fs.readFileSync(commonArtifacts.getContractDir(\"cw20-base\")), \"auto\");\nconst { contractAddress, gasUsed } = await client.instantiate(senderAddress, codeId, {\n    decimals: 6,\n    symbol: \"CVT\",\n    name: \"cosmoverse token\",\n    mint: { minter: senderAddress },\n    initial_balances: [{ address: senderAddress, amount: \"1000000000\" }] \n});\nconst cw20Contract = new Cw20BaseClient(client, senderAddress, contractAddress);\n\nawait cw20Contract.tokenInfo()\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  name: \u001b[32m'cosmoverse token'\u001b[39m,",
                                "  symbol: \u001b[32m'CVT'\u001b[39m,",
                                "  decimals: \u001b[33m6\u001b[39m,",
                                "  total_supply: \u001b[32m'1000000000'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Console.log in smart contract\n\n1. run `code ../cw-plus/contracts/cw20-base` to add log function\n1. run `cwtools build ../cw-plus/contracts/cw20-base -d -w -o node_modules/@oraichain/common-contracts-build/data/` to override wasm contract file\n1. re-run notebook above to see the log\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Execute contract with gas metering"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { Cw20BaseClient } from \"@oraichain/common-contracts-sdk\";\nconst cw20Contract = new Cw20BaseClient(client, senderAddress, contractAddress);\nconst { gasUsed } = await cw20Contract.transfer({amount: '1000000', recipient: 'orai1ur2vsjrjarygawpdwtqteaazfchvw4fg6uql76'});\nconsole.log(`Transfer token required gas: ${gasUsed}`);\n\nawait cw20Contract.balance({address:'orai1ur2vsjrjarygawpdwtqteaazfchvw4fg6uql76'})\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Transfer token required gas: 56478",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  balance: \u001b[32m'1000000'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Setup IBC channels"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { CWSimulateApp } from \"@oraichain/cw-simulate\";\n\nconst cosmosChain = new CWSimulateApp({\n    chainId: \"cosmoshub-4\",\n    bech32Prefix: \"cosmos\"\n});\n\n// relay message between Cosmos Hub and Oraichain\ncosmosChain.ibc.relay(\"channel-0\", \"transfer\", \"channel-0\", \"transfer\", client.app);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Send Orai token from Oraichain to Cosmos Hub"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// mint ibc/orai on cosmos hub and burn orai on oraichain\nawait client.app.ibc.sendTransfer({\n    channelId: \"channel-0\",\n    receiver: \"cosmos1ur2vsjrjarygawpdwtqteaazfchvw4fgf0kulf\",\n    token: { amount: \"1000000\", denom: \"orai\" },\n    sender: senderAddress\n});\n\ncosmosChain.bank.getBalance(\"cosmos1ur2vsjrjarygawpdwtqteaazfchvw4fgf0kulf\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    denom: \u001b[32m'ibc/56c280c7163a5e37ea987d3fa195ea719b7b7c7d319615afaa17cba5a347cec4'\u001b[39m,",
                                "    amount: \u001b[32m'1000000'\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Send back IBC Orai from Cosmos Hub to Oraichain"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "// mint orai on oraichain and burn ibc/orai on cosmos hub\nawait cosmosChain.ibc.sendTransfer({\n    channelId: \"channel-0\",\n    receiver: senderAddress,\n    token: { amount: \"1000000\", denom: \"ibc/56c280c7163a5e37ea987d3fa195ea719b7b7c7d319615afaa17cba5a347cec4\" },\n    sender: \"cosmos1ur2vsjrjarygawpdwtqteaazfchvw4fgf0kulf\"\n});\n\ncosmosChain.bank.getBalance(\"cosmos1ur2vsjrjarygawpdwtqteaazfchvw4fgf0kulf\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Load smart contract with state from running blockchain"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { DownloadState } from \"@oraichain/cw-simulate\";\nimport { Cw20BaseClient} from \"@oraichain/common-contracts-sdk\";\nimport path from \"path\";\n\nconst downloadState = new DownloadState('https://lcd.orai.io', path.join(__dirname, \"src/data\"));\nawait downloadState.loadState(client, senderAddress, \"orai1nd4r053e3kgedgld2ymen8l9yrw8xpjyaal7j5\", \"kwt token\");\nconst cw20Contract = new Cw20BaseClient(client, senderAddress, \"orai1nd4r053e3kgedgld2ymen8l9yrw8xpjyaal7j5\");\n\nawait cw20Contract.allAccounts({limit:5})"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  accounts: [",
                                "    \u001b[32m'orai1q9l6nvn5g3gnllft3shwepz6wln3zww8axlx9d'\u001b[39m,",
                                "    \u001b[32m'orai1qxts5avx4cr55fm6mfz4xdtrq446wqxpn3fy08'\u001b[39m,",
                                "    \u001b[32m'orai1qfuc8va6y79qt8yckzyxvc5d7j8lxdnj40ha9k'\u001b[39m,",
                                "    \u001b[32m'orai1q2adfmdxejrzepk6srnxjg6gnj45s660p0ljqn'\u001b[39m,",
                                "    \u001b[32m'orai1qt3s05k29d3qla398dg90x8226asejfewknj2g'\u001b[39m",
                                "  ]",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}